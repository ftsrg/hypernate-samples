#!/bin/sh -euC

FABLO="${FABLO:-./bin/fablo}"
YQ="${YQ:-yq}"
CONFIG_BASE="${CONFIG_TEMPLATE:-./config/fablo-config-base.yml}"
CC_DIR="${CC_DIR:-..}"

erho() { echo "error: $@" >&2; }

usage() {
	cat >&2 <<EOF
usage:	$0 [-dv] sample-chaincode-name up|down
	$0 [-lh]
EOF
}

command -v "$YQ" >/dev/null 2>&1 || {
	erho "yq not found"
	exit 1
}

debug= verbose=
while getopts dlhv opt; do
	case "$opt" in
	d) debug=yes;;
	h) usage; exit 0;;
	l)
		find "$CC_DIR/" -maxdepth 1 -type d -exec basename {} \; \
		| grep -Ev '(\.\.|\.git|test-network)'
		exit 0;;
	v) verbose=yes;;
	esac
done
shift $(($OPTIND - 1))
[ $# -eq 2 ] || { usage; exit 1; }
cc="$1"
action="$2"
[ -n "$debug" ] && verbose=yes

tmp_config="$(mktemp fablo-config.XXXXX)"
[ -n "$verbose" ] && echo "temporary config file path: $tmp_config"
if [ -n "$debug" ]; then
	echo "debug mode: config file will not be cleaned up"
else
	trap 'rm -f "$tmp_config"' EXIT
fi

"$YQ" "
.chaincodes += [{
  name: \"$cc\",
  version: \"0.1.0\",
  lang: \"java\",
  channel: .channels[0].name,
  directory: \"$CC_DIR/$cc\"
}]
" "$CONFIG_BASE" >> "$tmp_config"

[ -n "$debug" ] && { cat "$tmp_config"; set -x; }

case "$action" in
up)	"$FABLO" up "$tmp_config";;
down)	"$FABLO" prune "$tmp_config";;
*)	usage; exit 1;;
esac
